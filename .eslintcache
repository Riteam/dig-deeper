[{"D:\\react_game_demo\\src\\reportWebVitals.js":"1","D:\\react_game_demo\\src\\index.js":"2","D:\\react_game_demo\\src\\Board.js":"3","D:\\react_game_demo\\src\\App.js":"4","D:\\react_game_demo\\src\\Square.js":"5","D:\\react_game_demo\\src\\assets\\js\\bus.js":"6","D:\\react_game_demo\\src\\MessagePanel.js":"7","D:\\react_game_demo\\src\\assets\\js\\config.js":"8"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"10"},{"size":511,"mtime":1606793780344,"results":"11","hashOfConfig":"10"},{"size":14215,"mtime":1607499805021,"results":"12","hashOfConfig":"10"},{"size":903,"mtime":1607409805304,"results":"13","hashOfConfig":"10"},{"size":4303,"mtime":1607488520649,"results":"14","hashOfConfig":"10"},{"size":784,"mtime":1607499075072,"results":"15","hashOfConfig":"10"},{"size":258,"mtime":1607411198930,"results":"16","hashOfConfig":"10"},{"size":460,"mtime":1607489067685,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"10jhf04",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\react_game_demo\\src\\reportWebVitals.js",[],"D:\\react_game_demo\\src\\index.js",[],["37","38"],"D:\\react_game_demo\\src\\Board.js",["39","40","41"],"import { random } from 'lodash';\r\n\r\nimport React from 'react';\r\nimport Square from './Square'\r\nimport myEventBus from './assets/js/bus.js'\r\n\r\nimport { BoardLen, BoardSize, Debug } from './assets/js/config'\r\n\r\nlet idCounter = 0\r\n\r\nfunction getNewBoard() {\r\n  return new Array(BoardSize).fill(1).map(i => {\r\n    return getNewItem(7)\r\n  })\r\n}\r\n\r\nfunction getNewItem(dropHeight = 0, to) {\r\n  return {\r\n    type: random(1, 7),\r\n    id: ++idCounter,\r\n    dropHeight,\r\n    tripled: false,\r\n    to\r\n  }\r\n}\r\n\r\n// get Manhattan Distance\r\nfunction getManDis(p1, p2) {\r\n  let [x1, y1] = [p1 % BoardLen, p1 / BoardLen | 0]\r\n  let [x2, y2] = [p2 % BoardLen, p2 / BoardLen | 0]\r\n\r\n  return Math.abs(x1 - x2) + Math.abs(y1 - y2)\r\n}\r\n\r\n// 下标转坐标\r\nfunction index2Coord(index) {\r\n  return [index % BoardLen, index / BoardLen | 0]\r\n}\r\n\r\n// 获得形状的交点\r\nfunction getShapeCenter(arr) {\r\n  for (let i of arr) {\r\n    let x1 = i % BoardLen, y1 = i / BoardLen | 0, ji = 0\r\n    for (; ji < arr.length; ji++) {\r\n      let j = arr[ji]\r\n      if (i === j) continue\r\n      let x2 = j % BoardLen, y2 = j / BoardLen | 0\r\n      if (Math.abs(x2 - x1) === 0 || Math.abs(y2 - y1) === 0) continue\r\n      else break\r\n    }\r\n    if (ji === arr.length) return i\r\n  }\r\n  return false\r\n}\r\n\r\nfunction swap(arr, a, b) {\r\n  let temp = arr[a]\r\n  arr[a] = arr[b]\r\n  arr[b] = temp\r\n}\r\n\r\nfunction findTriple(arr, startPoint) {\r\n  let target = arr[startPoint].type,\r\n    res = []\r\n\r\n  function findAtX(pos) {\r\n    let x = pos, row = [],\r\n      xMin = (pos / BoardLen | 0) * BoardLen,\r\n      xMax = xMin + BoardLen - 1\r\n    while ((x - 1) >= xMin && arr[x - 1]?.type === target) {\r\n      x -= 1\r\n    }\r\n    while (x <= xMax && arr[x]?.type === target) {\r\n      row.push(x++)\r\n    }\r\n    return row\r\n  }\r\n\r\n  function findAtY(pos) {\r\n    let y = pos, col = []\r\n    while (arr[y - BoardLen]?.type === target) {\r\n      y -= BoardLen\r\n    }\r\n    while (arr[y]?.type === target) {\r\n      col.push(y)\r\n      y += BoardLen\r\n    }\r\n    return col\r\n  }\r\n\r\n  let firstXArr = findAtX(startPoint),\r\n    firstYArr = findAtY(startPoint)\r\n\r\n  if (firstXArr.length >= 3) {\r\n    res = res.concat(firstXArr)\r\n    firstXArr.forEach(xi => {\r\n      let YArr = findAtY(xi)\r\n      if (YArr.length >= 3) res = res.concat(YArr)\r\n    })\r\n  } else if (firstYArr.length >= 3) {\r\n    res = res.concat(firstYArr)\r\n    firstYArr.forEach(yi => {\r\n      let XArr = findAtX(yi)\r\n      if (XArr.length >= 3) res = res.concat(XArr)\r\n    })\r\n  }\r\n  return res\r\n}\r\n\r\n// console.log(boardArr)\r\n\r\nexport default class Board extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      boardArr: [],\r\n      selectedIndex: null,\r\n    };\r\n\r\n    // this.stateData = null\r\n    this.status = 0\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (Debug) {\r\n      console.log('==已开启Debug模式==')\r\n      console.log('可在js/config中修改')\r\n    }\r\n    this.resetBoard()\r\n  }\r\n\r\n  resetBoard() {\r\n    this.setState({\r\n      boardArr: getNewBoard()\r\n    })\r\n    myEventBus.once('fillEnd', (index) => {\r\n      console.log('reset fillEnd 触发', index);\r\n      this.digTriple()\r\n    })\r\n  }\r\n\r\n  clickHandler(index) {\r\n    // 空格不处理\r\n    if (this.state.boardArr[index].tripled) return false\r\n    // 不在空闲状态不处理\r\n    if (this.status !== 0) return false\r\n\r\n    let sIndex = this.state.selectedIndex\r\n\r\n    if (this.state.boardArr[sIndex]) {\r\n      if (index === sIndex) {\r\n        // 取消选择\r\n        this.setState({ selectedIndex: null })\r\n        return\r\n      }\r\n      let distance = Math.abs(index - sIndex)\r\n      if (distance === BoardLen || distance === 1) {\r\n        // if (true) {\r\n        // 是上下左右的相邻格子，可以交换\r\n        let newBoardArr = [...this.state.boardArr]\r\n        swap(newBoardArr, sIndex, index)\r\n\r\n\r\n\r\n        this.setState({\r\n          boardArr: newBoardArr,\r\n          selectedIndex: null\r\n        });\r\n\r\n        myEventBus.once('switchEnd', () => {\r\n          let DBpos = [index, sIndex].find(i => newBoardArr[i].type === 8)\r\n          if (DBpos >= 0) {\r\n            this.dragonBreathBurst(DBpos, newBoardArr[index + sIndex - DBpos].type)\r\n          } else {\r\n            this.digTriple([index, sIndex], true)\r\n          }\r\n        })\r\n\r\n        this.status = 1\r\n        return\r\n      }\r\n    }\r\n\r\n    // 选中格子\r\n    this.setState({ selectedIndex: index })\r\n  }\r\n\r\n  // when switch animation end -> digTriple\r\n  switchEndHandler(index) {\r\n    myEventBus.emit('switchEnd', index)\r\n  }\r\n\r\n  // 龙息瓶爆炸！！\r\n  dragonBreathBurst(selfPos, targetType) {\r\n    let needDestroyPosArr = [selfPos]\r\n    let newBoardArr = this.state.boardArr.map((item, index) => {\r\n      if (item.type === targetType) {\r\n        item.tripled = true\r\n        needDestroyPosArr.push(index)\r\n      }\r\n      return item\r\n    })\r\n    newBoardArr[selfPos].tripled = true\r\n    this.setState({\r\n      boardArr: newBoardArr,\r\n      selectedIndex: null\r\n    });\r\n    // 提交分数\r\n    this.props.onScoreSubmit(needDestroyPosArr.length * 15 + 50)\r\n\r\n    myEventBus.once('destroyEnd', () => {\r\n      this.dropDown(needDestroyPosArr)\r\n    })\r\n  }\r\n\r\n  // 检查地图是否有效\r\n  checkGameAvailable() {\r\n    Debug && console.log('%c* checkGameAvailable', 'color: red;');\r\n    let { boardArr } = this.state\r\n    // console.clear()\r\n    for (let i = 0; i < boardArr.length; i++) {\r\n      // console.log(i);\r\n      let target = boardArr[i].type\r\n      if (target === 8) return true\r\n      /*\r\n      情况1\r\n        ■    ■\r\n      ■   ■■  ■\r\n        ■    ■\r\n      */\r\n      if (\r\n        i % BoardLen !== BoardLen - 1        //不在最后一列\r\n        && boardArr[i + 1]?.type === target   //右侧相等\r\n      ) {\r\n        let pos = []\r\n        if (i % BoardLen > 0) {\r\n          pos.push(\r\n            i - BoardLen - 1,  //左上\r\n            i + BoardLen - 1   //左下\r\n          )\r\n        }\r\n        if (i % BoardLen < BoardLen - 2) {\r\n          pos.push(\r\n            i - BoardLen + 2,  //右上\r\n            i + BoardLen + 2   //右下\r\n          )\r\n        }\r\n        if (i % BoardLen > 1) {\r\n          pos.push(\r\n            i - 2               //左2\r\n          )\r\n        }\r\n        if (i % BoardLen < BoardLen - 3) {\r\n          pos.push(\r\n            i + 3,              //右3\r\n          )\r\n        }\r\n\r\n        if (\r\n          pos.some(p => p >= 0 && boardArr[p]?.type === target)\r\n        )\r\n          return true\r\n      }\r\n      /*\r\n      情况2\r\n        ■\r\n      ■  ■\r\n        ■\r\n        ■\r\n      ■  ■\r\n        ■\r\n      */\r\n      if (\r\n        i < BoardLen * (BoardLen - 1)                //不在最后一行\r\n        && boardArr?.[i + BoardLen].type === target   //下侧相等\r\n      ) {\r\n        let pos = []\r\n        if (i % BoardLen > 0) {\r\n          pos.push(\r\n            i - BoardLen - 1,      //左上\r\n            i + BoardLen * 2 - 1   //左下\r\n          )\r\n        }\r\n        if (i % BoardLen < BoardLen - 1) {\r\n          pos.push(\r\n            i - BoardLen + 1,      //右上\r\n            i + BoardLen * 2 + 1   //右下\r\n          )\r\n        }\r\n        pos.push(\r\n          i - BoardLen * 2,        //上2\r\n          i + BoardLen * 3         //下3\r\n        )\r\n\r\n        if (\r\n          pos.some(p => p >= 0 && boardArr[p]?.type === target)\r\n        )\r\n          return true\r\n      }\r\n      /*\r\n      情况3\r\n      ■  ■\r\n        ■\r\n      ■  ■\r\n      */\r\n      else {\r\n        let pos = [\r\n          i - BoardLen - 1, //左上\r\n          i - BoardLen + 1, //右上\r\n          i + BoardLen + 1, //右下\r\n          i + BoardLen - 1, //左下\r\n        ]\r\n        if (i % BoardLen === 0) {\r\n          pos[0] = pos[3] = -1\r\n        }\r\n        if (i % BoardLen === BoardLen - 1) {\r\n          pos[1] = pos[2] = -1\r\n        }\r\n        for (let j = 0; j < pos.length; j++) {\r\n          let curr = pos[j], next = pos[(j + 1) % 4]\r\n          if (\r\n            boardArr[curr]?.type === target\r\n            && boardArr[next]?.type === target\r\n          )\r\n            return true\r\n        }\r\n      }\r\n    }\r\n    return false\r\n  }\r\n\r\n\r\n  // 寻找并消灭三连！\r\n  digTriple(posArr, isSwitch) {\r\n    Debug && console.log('%c* digTriple', 'color: red;');\r\n    this.status = 2\r\n    if (!posArr) {\r\n      // 不传表示全盘检查，仅需每3个格子检查一次\r\n      posArr = []\r\n      for (let i = 0; i <= BoardSize - 1; i += 3) {\r\n        posArr.push(i)\r\n      }\r\n    }\r\n    // console.log('posArr.length', posArr.length);\r\n\r\n    let needDestroyShape = new Map(),\r\n      posTripled = new Set()\r\n\r\n    posArr.forEach(i => {\r\n      if (posTripled.has(i)) {\r\n        return false\r\n      }\r\n      // 以该点为起点寻找三连\r\n      let pos = findTriple(this.state.boardArr, i)\r\n      // console.log(pos);\r\n      if (pos.length >= 3) {\r\n        // console.log('destroyed', pos);\r\n        let core = pos[pos.length >> 1], posSet = new Set()\r\n\r\n        // 一字型，core设为中间\r\n        // if (pos.length >= 5) {\r\n        //   let sort = pos.sort(),\r\n        //     dis = sort[1] - sort[0],\r\n        //     res = true\r\n\r\n        //   for (let p = 2; p < sort.length; p++) {\r\n        //     if (pos[p] - pos[p - 1] !== dis) {\r\n        //       res = false\r\n        //       break\r\n        //      }\r\n        //   }\r\n        //   if (res)\r\n        // }\r\n\r\n        for (let p of pos) {\r\n          if (posSet.has(p)) core = p\r\n          else posSet.add(p)\r\n        }\r\n        // needDestroyShape = needDestroyShape.concat([...posSet])\r\n        needDestroyShape.set(core, posSet)\r\n        posTripled.add(i)\r\n        posSet.forEach(i => posTripled.add(i))\r\n      }\r\n    })\r\n\r\n    if (needDestroyShape.size === 0) {\r\n      this.status = 0\r\n      console.log('无三连');\r\n      if (isSwitch) {\r\n        // this.checkGameAvailable()\r\n        // 回到交换前位置\r\n        let newBoardArr = [...this.state.boardArr]\r\n        swap(newBoardArr, posArr[0], posArr[1])\r\n        setTimeout(() => {\r\n          this.setState({\r\n            boardArr: newBoardArr,\r\n            selectedIndex: null\r\n          });\r\n        }, 100);\r\n      } else {\r\n        let able = this.checkGameAvailable()\r\n        // if (true) {\r\n        if (!able) {\r\n          console.warn('地图无效！')\r\n          setTimeout(() => {\r\n            alert('地图不可用，即将刷新')\r\n            this.resetBoard()\r\n          }, 200);\r\n        }\r\n      }\r\n      return false\r\n    }\r\n\r\n    let newBoardArr = [...this.state.boardArr],\r\n      needDestroyPosArr = []\r\n\r\n    for (let [core, posSet] of needDestroyShape) {\r\n      // console.log(posSet);\r\n      if (posSet.size <= 4) {\r\n        // 正常消除\r\n        posSet.forEach(i => newBoardArr[i].tripled = true)\r\n\r\n        needDestroyPosArr.push(...posSet)\r\n\r\n        // 提交分数\r\n        this.props.onScoreSubmit(posSet.size * 10)\r\n      } else {\r\n        // 飞向核心并生成龙息瓶\r\n        posSet.delete(core)\r\n        newBoardArr[core].type = 8\r\n\r\n        posSet.forEach(i => newBoardArr[i].to = core)\r\n        needDestroyPosArr.push(...posSet)\r\n\r\n        // 提交分数\r\n        this.props.onScoreSubmit(posSet.size * 20)\r\n      }\r\n    }\r\n    // needDestroyShape.forEach(j => newBoardArr[j].tripled = true)\r\n    this.setState({\r\n      boardArr: newBoardArr,\r\n      selectedIndex: null\r\n    });\r\n    myEventBus.once('destroyEnd', () => {\r\n      this.dropDown(needDestroyPosArr)\r\n    })\r\n  }\r\n\r\n  destroyEndHandler(index) {\r\n    myEventBus.emit('destroyEnd', index)\r\n  }\r\n\r\n  // 下落\r\n  dropDown(posArr) {\r\n    Debug && console.log('%c* dropDown', 'color: red;', posArr);\r\n    this.status = 3\r\n\r\n    let endPos = new Set(),\r\n      emptyArrTotal = [],\r\n      newBoardArr = [...this.state.boardArr]\r\n    for (let pos of posArr) {\r\n      endPos.add(56 + pos % BoardLen)\r\n    }\r\n    // 得到底部坐标\r\n    endPos = [...endPos]\r\n    // 自底部向上遍历\r\n    for (let epos of endPos) {\r\n      let emptyArr = []\r\n      while (epos >= 0) {\r\n        if (newBoardArr[epos].tripled || newBoardArr[epos].to >= 0) {\r\n          emptyArr.push(epos)\r\n          epos -= BoardLen\r\n        }\r\n        else if (emptyArr.length > 0) {\r\n          let pos = emptyArr.shift()\r\n          swap(newBoardArr, pos, epos)\r\n        } else {\r\n          epos -= BoardLen\r\n        }\r\n      }\r\n      emptyArrTotal = emptyArrTotal.concat(emptyArr)\r\n    }\r\n    // console.log(endPos);\r\n    this.setState({\r\n      boardArr: newBoardArr\r\n    })\r\n\r\n    setTimeout(() => {\r\n      this.fillSquire(emptyArrTotal)\r\n    }, 0);\r\n  }\r\n\r\n  fillSquire(posArr) {\r\n    Debug && console.log('%c* fillSquire', 'color: red;', posArr);\r\n    this.status = 4\r\n\r\n    let dropCountPerCol = {},\r\n      longestCol = 0,\r\n      longestColCount = 0\r\n    for (let pos of posArr) {\r\n      let col = pos % BoardLen\r\n      if (col in dropCountPerCol) dropCountPerCol[col]++\r\n      else dropCountPerCol[col] = 1\r\n      if (dropCountPerCol[col] > longestColCount) {\r\n        longestCol = col\r\n        longestColCount = dropCountPerCol[col]\r\n      }\r\n    }\r\n    let newBoardArr = [...this.state.boardArr]\r\n    for (let pos of posArr) {\r\n      newBoardArr[pos] = getNewItem(dropCountPerCol[pos % BoardLen])\r\n    }\r\n    this.setState({\r\n      boardArr: newBoardArr\r\n    })\r\n\r\n\r\n    myEventBus.on('fillEnd', (index) => {\r\n      if (index % BoardLen === longestCol) {\r\n        // 需等到最后一个掉落再触发\r\n        myEventBus.off('fillEnd')\r\n        // console.log(myEventBus.fillEnd);\r\n        // 全部检查\r\n        this.digTriple()\r\n      }\r\n    })\r\n  }\r\n\r\n  fillEndHandler(index) {\r\n    myEventBus.emit('fillEnd', index)\r\n  }\r\n\r\n  renderSquare(i, index) {\r\n    return <Square\r\n      {...i}\r\n      index={index}\r\n      size={BoardLen}\r\n      on={index === this.state.selectedIndex}\r\n      onClick={() => this.clickHandler(index)}\r\n      onSwitchEnd={() => this.switchEndHandler(index)}\r\n      onDestroyEnd={(e) => this.destroyEndHandler({ e, index })}\r\n      onFillEnd={() => this.fillEndHandler(index)}\r\n\r\n      key={i.id}\r\n    />;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        {\r\n          this.state.boardArr.map((item, index) => this.renderSquare(item, index))\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","D:\\react_game_demo\\src\\App.js",["42"],"D:\\react_game_demo\\src\\Square.js",["43","44"],"import React from 'react';\r\nimport { BoardLen, Debug, Icons } from './assets/js/config'\r\n\r\n// 下标转坐标\r\nfunction index2Coord(index) {\r\n  return [index % BoardLen, index / BoardLen | 0]\r\n}\r\n\r\nexport default class Square extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n\r\n      on: false,\r\n      // style: {}\r\n    }\r\n    this.myRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    let { id, index, dropHeight } = this.props\r\n    if (dropHeight > 0) {\r\n      let el = this.myRef.current\r\n      // let Y = index / 7 | 0\r\n      el.animate(\r\n        [\r\n          { transform: `translateY(-${dropHeight * 100}px)` },\r\n          { transform: `translateY(0)` }\r\n        ],\r\n        {\r\n          duration: 85 * dropHeight,\r\n          easing: 'ease-in'\r\n        }\r\n      )\r\n        .finished.then(res => {\r\n          this.props.onFillEnd(this.props.index)\r\n        });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProp) {\r\n    let el = this.myRef.current,\r\n      currIndex = this.props.index\r\n\r\n    if (this.props.tripled) {\r\n      // el.animate(\r\n      //   [\r\n      //     { transform: `rotate(-90deg) scale()` },\r\n      //     { transform: `translate(0)` }\r\n      //   ],\r\n      //   {\r\n      //     duration: (Math.abs(x1 - x2) + Math.abs(y1 - y2)) * 85,\r\n      //     easing: 'ease-in'\r\n      //   }\r\n      // );\r\n    }\r\n    else if (this.props.index !== prevProp.index) {\r\n      // switch & drop animation\r\n      let [x1, y1] = index2Coord(prevProp.index),\r\n        [x2, y2] = index2Coord(this.props.index)\r\n      el.animate(\r\n        [\r\n          { transform: `translate(${(x1 - x2) * 100}px, ${(y1 - y2) * 100}px)`, zIndex: prevProp.on ? 2 : 1 },\r\n          { transform: `translate(0)`, zIndex: prevProp.on ? 2 : 1 }\r\n        ],\r\n        {\r\n          duration: (Math.abs(x1 - x2) + Math.abs(y1 - y2)) * 85,\r\n          easing: 'ease-in'\r\n        }\r\n      )\r\n        .finished.then(res => {\r\n          this.props.onSwitchEnd(this.props.index)\r\n        })\r\n      // console.log(x1 - x2, y1 - y2, (Math.abs(x1 - x2) + Math.abs(y1 - y2)) * 100);\r\n    } else if (this.props.to >= 0 && this.props.to !== prevProp.to) {\r\n      // fly to core animtion\r\n      let [x1, y1] = index2Coord(currIndex),\r\n        [x2, y2] = index2Coord(this.props.to)\r\n      el.animate([\r\n        { transform: `translate(0) scale(1)`, opacity: 1 },\r\n        { transform: `translate(${(x2 - x1) * 60}px, ${(y2 - y1) * 60}px)scale(.5)`, opacity: 1 },\r\n        { transform: `translate(${(x2 - x1) * 100}px, ${(y2 - y1) * 100}px)scale(0)`, opacity: .1 }\r\n      ],\r\n        {\r\n          duration: 300,\r\n          easing: 'linear',\r\n          fill: 'forwards'\r\n        })\r\n    } else if (this.props.type === 8 && prevProp.type !== 8) {\r\n      el.animate([\r\n        {\r\n          transform: `translateY(0) scale(1)`,\r\n          backgroundImage: `url(${Icons[prevProp.type]})`,\r\n          zIndex: 3\r\n        },\r\n        {\r\n          transform: `translateY(50px) scale(0)`,\r\n          zIndex: 3,\r\n          offset: 0.8,\r\n        },\r\n        {\r\n          transform: `translateY(0) scale(1)`,\r\n          zIndex: 3\r\n        },\r\n      ],\r\n        {\r\n          duration: 400,\r\n          easing: `cubic-bezier(.175, .885, .32, 1.275)`\r\n        }).finished.then(res => {\r\n          this.props.onDestroyEnd()\r\n        })\r\n    }\r\n  }\r\n\r\n  tnHandler = (e) => {\r\n    if (e.propertyName === 'transform') {\r\n      this.props.onDestroyEnd()\r\n    }\r\n  }\r\n  render() {\r\n    let iconClass = ['icon']\r\n    if (this.props.type) iconClass.push('t' + this.props.type)\r\n    if (this.props.tripled) iconClass.push('tripled')\r\n    if (this.props.to >= 0) iconClass.push('to')\r\n\r\n    let squaresClass = ['squares']\r\n    let [x, y] = index2Coord(this.props.index)\r\n    if (this.props.on) squaresClass.push('on')\r\n    if ((x + y) % 2 === 0) squaresClass.push('dif')\r\n\r\n    let debugTip =\r\n      <p className=\"testfont\">\r\n        index:{this.props.index} <br />\r\n        type:{this.props.type} <br />\r\n        id:{this.props.id}\r\n      </p>\r\n\r\n    return <div\r\n      className={squaresClass.join(' ')}\r\n      onClick={this.props.onClick}\r\n    >\r\n      <div\r\n        ref={this.myRef}\r\n        onTransitionEnd={this.tnHandler}\r\n        className={iconClass.join(' ')}></div>\r\n      {Debug ? debugTip : null}\r\n    </div>\r\n  }\r\n}","D:\\react_game_demo\\src\\assets\\js\\bus.js",[],"D:\\react_game_demo\\src\\MessagePanel.js",[],"D:\\react_game_demo\\src\\assets\\js\\config.js",[],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":28,"column":10,"nodeType":"51","messageId":"52","endLine":28,"endColumn":19},{"ruleId":"49","severity":1,"message":"53","line":36,"column":10,"nodeType":"51","messageId":"52","endLine":36,"endColumn":21},{"ruleId":"49","severity":1,"message":"54","line":41,"column":10,"nodeType":"51","messageId":"52","endLine":41,"endColumn":24},{"ruleId":"49","severity":1,"message":"55","line":1,"column":8,"nodeType":"51","messageId":"52","endLine":1,"endColumn":12},{"ruleId":"49","severity":1,"message":"56","line":21,"column":11,"nodeType":"51","messageId":"52","endLine":21,"endColumn":13},{"ruleId":"49","severity":1,"message":"57","line":21,"column":15,"nodeType":"51","messageId":"52","endLine":21,"endColumn":20},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],"no-unused-vars","'getManDis' is defined but never used.","Identifier","unusedVar","'index2Coord' is defined but never used.","'getShapeCenter' is defined but never used.","'logo' is defined but never used.","'id' is assigned a value but never used.","'index' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]